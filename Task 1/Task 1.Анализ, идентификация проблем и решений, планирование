1. Анализ проблемных мест

	Потеря/дублирование сообщений 
        Не все сервисы внутри периметра обмениваются между собой сообщениями через единую шину данных. Может быть "петля" в обмене сообщений между Shop API, 3d  files storage, CRM API и MES API
		Без HA/кластера и подтверждений о доставке возможны потери сообщений и проблемы с заказами.
		
    Слабая наблюдаемость (Observability)
        Нет распределённого трейсинга, централизованного мониторинга и алертинга. При сбоях и задержках сложно быстро понять, на каком участке — CRM, MES, RabbitMQ или 3D Files Storage — «застрял» заказ.
    
    Магазин и CRM используют общую базу данных, что нарушает принцип Database per Service
        Отсутствие гранулярного контроля доступа с точки зрения безопасности
		Сложность при масштабировании: невозможно отдельно масштабировать БД магазина или БД CRM, если всё сливается в одну базу.
        Проблемы с производительностью: высокая нагрузка на БД магазина может привести к проблемам в работе CRM и наоборот.

    Задержки в расчёте стоимости
        MES API выполняет сложные вычисления (до 30 минут), что блокирует обработку последующих заказов, повышает время ответа.

    Ограниченные ресурсы инфраструктуры (один инстанс на сервис)
        При росте нагрузки (B2B и B2C) система не масштабируется горизонтально, есть риск перегрузки RabbitMQ и баз данных.

    Проблемы в релизном цикле
        Нет полноценной автоматизации тестов, QA-инженер проводит ручное E2E-тестирование; каждый high-bug блокирует релизы и вызывает сдвиг графика.

2. Перечень инициатив


	Выделенный расчёт стоимости и паттерн отработки задержек
        Реализовать паттерн отработки задержек при расчете стоимости
		Создать отдельный сервис/воркерный пул для вычислительных задач, чтобы не блокировать MES API на длительные операции (до 30 минут).

    Внедрить централизованный мониторинг (tracing + alerting)
        Использовать OpenTelemetry + Jaeger для распределённого tracing, собирать метрики в Prometheus/Grafana для alerting.

    Отказоустойчивый RabbitMQ
        Организовать кластер, настроить подтверждения.

    Разделение баз (Shop DB и CRM DB), отказ от «общей» БД.
        Перенести таблицы CRM в новую CRM DB, убрать взаимные зависимости в коде и конфигурациях, оставив Shop DB только для магазина.

    

    Оптимизация работы с 3D-файлами
        Проверить, действительно ли необходимо прямое чтение/запись из CRM API. Возможно, вынести все операции в единый «File Service».
        Настроить кэширование, CDN или по крайней мере ограничить «горячие» файлы в S3.

    Горизонтальное масштабирование
        Перевести ключевые сервисы (Shop, CRM, MES) на контейнеры или добавить авто-масштабируемые группы EC2.
        Масштабировать базу на чтение (реплики), если растёт нагрузка.

    Ускорение релизов и автотесты
        Настроить CI/CD с автоматическими регрессионными тестами.
        Разгрузить QA-инженера, увеличить долю автоматизации.

3. Приоритизация инициатив и видение целевой архитектуры
Целевая архитектура через полгода

Через полгода система должна достичь нескольких ключевых целей:

    Наблюдаемость: трейсинг (OpenTelemetry → Jaeger), метрики (Prometheus / Alert Manager / Grafana) и логирование в едином центре (ELK или Loki/Grafana).
    RabbitMQ в отказоустойчивой конфигурации; очереди настроены на двунаправленный обмен между CRM и MES.
    Разделение баз (Shop DB и CRM DB), отказ от «общей» БД.
    Отдельная подсистема для расчёта стоимости, которую можно горизонтально масштабировать независимо от MES API.
    Оптимизированная работа с 3D Files Storage: возможно единый сервис для всех «файловых» операций, кэширование.
    CI/CD с автотестами (минимум smoke/regression), чтобы релизы шли без месячных задержек.

Топ-3 инициативы на ближайшие полгода

    Внедрение продвинутого мониторинга (метрики, алертинг, дашборды).
    Вынос расчёта стоимости в отдельный воркер/микросервис (убрать блокировки из MES API).
    Разделение баз (Shop DB и CRM DB).
